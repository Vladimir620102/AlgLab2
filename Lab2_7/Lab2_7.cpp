/*
1.	Разработать приложение, которые будет находить возрастающую подпоследовательность.
2.	Пользователь вводит N – число элементов последовательности.
3.	Приложении находит длину максимальной подпоследовательности и выводит пользователю на экран.На новой строке выводит максимальную(одну из максимальных) возрастающую подпоследовательность.

Например, имеется последовательность - 5, 10, 6, 12, 3, 24, 7, 8
Ответ:
4
5, 6, 7, 8
*/


#include <iostream>
#include <vector>


using namespace std;

void findLIS(vector<int> const& arr);

int main()
{
    setlocale(LC_CTYPE, "Russian");

    vector<int> arr = { 0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15 };

    cout << "исходные данные:" << endl;
    for (int a : arr) {
        cout << a << " ";
    }

    cout << endl;

    findLIS(arr);

    return 0;
}


#include <iostream>
#include <vector>
using namespace std;

// Итерационная функция для поиска самой длинной возрастающей подпоследовательности
// данного массива
void findLIS(vector<int> const& arr)
{
    int n = arr.size();

    // базовый вариант
    if (n == 0) {
        return;
    }

    // LIS[i] хранит самую длинную возрастающую подпоследовательность подмассива
    // arr[0…i], оканчивающийся на arr[i]
    vector<vector<int>> LIS(n, vector<int>{});

    // LIS[0] обозначает самую длинную возрастающую подпоследовательность, заканчивающуюся на arr[0]
    LIS[0].push_back(arr[0]);

    // начинаем со второго элемента массива
    for (int i = 1; i < n; i++)
    {
        // делаем для каждого элемента подмассива arr[0…i-1]
        for (int j = 0; j < i; j++)
        {
            // находим самую длинную возрастающую подпоследовательность, заканчивающуюся на arr[j]
            // где arr[j] меньше, чем текущий элемент arr[i]

            if (arr[j] < arr[i] && LIS[j].size() > LIS[i].size()) {
                LIS[i] = LIS[j];
            }
        }

        // включить arr[i] в LIS[i]
        LIS[i].push_back(arr[i]);
    }

    // j хранит индекс LIS
    int j = 0;
    for (int i = 0; i < n; i++)
    {
        if (LIS[j].size() < LIS[i].size()) {
            j = i;
        }
    }
    cout << "Максимальная возрастающая подпоследовательность (их может быть несколько одной длины): " << endl;

    int len = 0;
    // печатаем LIS
    for (int i : LIS[j]) {
        cout << i << " ";
        len++;
    }
    cout << endl << "Длина максимальной возрастающей подпоследовательности: " << len << endl;
}
